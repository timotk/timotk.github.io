<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>pydantic on Timo</title><link>https://timotk.github.io/tags/pydantic/</link><description>Recent content in pydantic on Timo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 07 Aug 2023 13:00:00 +0200</lastBuildDate><atom:link href="https://timotk.github.io/tags/pydantic/index.xml" rel="self" type="application/rss+xml"/><item><title>Enforce and Validate LLM Output with Pydantic</title><link>https://timotk.github.io/posts/2023/08/enforce-and-validate-llm-output-with-pydantic/</link><pubDate>Mon, 07 Aug 2023 13:00:00 +0200</pubDate><guid>https://timotk.github.io/posts/2023/08/enforce-and-validate-llm-output-with-pydantic/</guid><description>Introduction Large Language Models (LLMs) excel in generating text but often struggle to produce structured output. By leveraging Pydantic&amp;rsquo;s type validation and prompt engineering, we can enforce and validate the output generated by LLMs.
All code examples in this blog post are written in Python. The LLM used is OpenAI&amp;rsquo;s gpt-3.5-turbo.
Query the LLM To query the LLM, we use the following function:
import openai def query(prompt: str) -&amp;gt; str: &amp;#34;&amp;#34;&amp;#34;Query the LLM with the given prompt.</description></item></channel></rss>