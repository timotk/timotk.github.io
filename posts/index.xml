<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Timo</title><link>https://timotk.github.io/posts/</link><description>Recent content in Posts on Timo</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><atom:link href="https://timotk.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>A Terminal Spinner in Python</title><link>https://timotk.github.io/posts/1/01/a-terminal-spinner-in-python/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://timotk.github.io/posts/1/01/a-terminal-spinner-in-python/</guid><description>We are going to build a spinning status indicator that runs while other code is executing.
It will look like this: Why? You&amp;rsquo;ve got some code that takes a while to run.
import time import random def slow_func(): seconds = random.randint(2, 5) time.sleep(seconds) print(&amp;#34;Done!&amp;#34;) if __name__ == &amp;#39;__main__&amp;#39;: slow_func() Now, when you execute this, you&amp;rsquo;ll see the following: You&amp;rsquo;ll wonder whether your code or your system is working correctly or frozen.</description><content type="html"><![CDATA[<p>We are going to build a spinning status indicator that runs while other code is executing.</p>
<p>It will look like this:
<img src="/images/spinner.gif" alt=""></p>
<h2 id="why">Why?</h2>
<p>You&rsquo;ve got some code that takes a while to run.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">slow_func</span>():
</span></span><span style="display:flex;"><span>    seconds <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(seconds)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Done!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    slow_func()
</span></span></code></pre></div><p>Now, when you execute this, you&rsquo;ll see the following:
<img src="/images/terminal-busy-block.png" alt=""></p>
<p>You&rsquo;ll wonder whether your code or your system is working correctly or frozen. Who knows?</p>
<h2 id="introducing-a-spinner">Introducing a spinner</h2>
<p>Ideally, we&rsquo;d like to show some sort of activity while our code is executing.
We can do that with a spinner. To create a spinner, we can use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">spin</span>():
</span></span><span style="display:flex;"><span>    spinners <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>cycle(spinners):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)
</span></span></code></pre></div><ol>
<li>We introduce a list of spinners (<code>| / - \ </code>). The double backslash is used because of <a href="https://www.freecodecamp.org/news/escape-sequences-python/">escaping</a>.</li>
<li>Using <code>itertools.cycle</code>, we can create an endless <em>cycle</em> of our spinner elements.</li>
<li>In each iteration, we print one of characters.
<ol>
<li>By default, Python ends a print statement with a newline. We disable that by printing an empty string (<code>end=&quot;&quot;</code>)</li>
<li>By putting <code>\r</code> in front of our character, we move our cursor back to the start of the line. This is called a <a href="https://en.wikipedia.org/wiki/Carriage_return">carriage return</a>.</li>
<li>We sleep for 100ms.</li>
</ol>
</li>
</ol>
<h1 id="combine-the-spinner-with-the-code">Combine the spinner with the code</h1>
<p>Now, combining them can be done like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>spin()
</span></span><span style="display:flex;"><span>slow_func()
</span></span></code></pre></div><p>But obviously this does not work, since our code executes sequentially.
First the spinner runs to completion, then <code>slow_func</code> will run.
Due to the endless nature of <code>itertools.cycle</code>, our code in <code>spin()</code> never stops.</p>
<p>To solve this, we can run our spinner in its own <a href="https://docs.python.org/3/library/threading.html">thread</a>, which allows us to run code in parallel:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> threading
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>spin)
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>    slow_func()
</span></span></code></pre></div><ol>
<li>We start a new thread, with the <code>spin</code> function as its target.</li>
<li>We set <code>thread.daemon</code> to True, to make the thread run in the background.</li>
<li>We start the thread.</li>
<li>We call our slow function</li>
</ol>
<p>Here&rsquo;s what it looks like:
<img src="/images/spinner.gif" alt=""></p>
<h1 id="making-it-awesome">Making it awesome</h1>
<p>If you want to reuse your code, it wouldn&rsquo;t be so nice. To fix that, we can introduce a <a href="https://docs.python.org/3/reference/datamodel.html#context-managers">context manager</a>.
This will make usage look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> Spinner():
</span></span><span style="display:flex;"><span>    slow_func()
</span></span></code></pre></div><p>Here&rsquo;s how we write the context manager:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Spinner</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>spin)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">spin</span>(self):
</span></span><span style="display:flex;"><span>        spinners <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>cycle(spinners):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>running:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>            time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __enter__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __exit__(self, exc_type, exc_val, exc_tb):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span></code></pre></div><p>The logic is:</p>
<ol>
<li>We initialize the instance with <code>Spinner()</code>. This calls <code>__init__()</code>, which sets running to <code>False</code> and creates the thread.</li>
<li>After the <code>with Spinner():</code> line, <code>Spinner.__enter__()</code> gets called. We now enter the context and the thread starts running.</li>
<li>Our slow function runs. Meanwhile, every 100ms, a spin character gets printed.</li>
<li>Our slow function ends and we exit the <code>with</code> block. Now, <code>Spinner.__exit__()</code> gets called. Running will be set to <code>False</code>, which means the <code>spin()</code> method will break out of its loop, once it detects <code>self.running</code> is <code>False</code>.</li>
</ol>
<h1 id="further-improvements">Further improvements</h1>
<p>We can make our code even more dynamic, by allowing you to set the spin timeout and the spinners during class initialization.
Here&rsquo;s the full code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> threading
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Spinner</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, timeout: float <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.1</span>, spinners: list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#34;</span>]):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>timeout <span style="color:#f92672">=</span> timeout
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>spinners <span style="color:#f92672">=</span> spinners
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>spin)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">spin</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>cycle(self<span style="color:#f92672">.</span>spinners):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>running:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>            time<span style="color:#f92672">.</span>sleep(self<span style="color:#f92672">.</span>timeout)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __enter__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __exit__(self, exc_type, exc_val, exc_tb):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span></code></pre></div><p>You could use any spinners you like, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;⢿&#34;</span>, <span style="color:#e6db74">&#34;⣻&#34;</span>, <span style="color:#e6db74">&#34;⣽&#34;</span>, <span style="color:#e6db74">&#34;⣾&#34;</span>, <span style="color:#e6db74">&#34;⣷&#34;</span>, <span style="color:#e6db74">&#34;⣯&#34;</span>, <span style="color:#e6db74">&#34;⣟&#34;</span>, <span style="color:#e6db74">&#34;⡿&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;👆&#34;</span>, <span style="color:#e6db74">&#34;👉&#34;</span>, <span style="color:#e6db74">&#34;👇&#34;</span>, <span style="color:#e6db74">&#34;👈&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;|   &#34;</span>, <span style="color:#e6db74">&#34; |  &#34;</span>, <span style="color:#e6db74">&#34;  | &#34;</span>, <span style="color:#e6db74">&#34;   |&#34;</span>]
</span></span></code></pre></div><p>You can find many more examples online, or you can simply make your own.</p>
<h1 id="final-thoughts">Final thoughts</h1>
<p>I hoped you learned something about how we can indicate activity while you are running your program interactively.
If you need a more extensive approach, you can use a library like <a href="https://github.com/Textualize/rich">rich</a>.</p>
]]></content></item></channel></rss>