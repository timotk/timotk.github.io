<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Timo</title><link>https://timotk.github.io/posts/</link><description>Recent content in Posts on Timo</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Mon, 07 Aug 2023 13:00:00 +0200</lastBuildDate><atom:link href="https://timotk.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Enforce and Validate LLM Output with Pydantic</title><link>https://timotk.github.io/posts/2023/08/enforce-and-validate-llm-output-with-pydantic/</link><pubDate>Mon, 07 Aug 2023 13:00:00 +0200</pubDate><guid>https://timotk.github.io/posts/2023/08/enforce-and-validate-llm-output-with-pydantic/</guid><description>Introduction Large Language Models (LLMs) excel in generating text but often struggle to produce structured output. By leveraging Pydantic&amp;rsquo;s type validation and prompt engineering, we can enforce and validate the output generated by LLMs.
All code examples in this blog post are written in Python. The LLM used is OpenAI&amp;rsquo;s gpt-3.5-turbo.
Query the LLM To query the LLM, we use the following function:
import openai def query(prompt: str) -&amp;gt; str: &amp;#34;&amp;#34;&amp;#34;Query the LLM with the given prompt.</description><content type="html"><![CDATA[<h1 id="introduction">Introduction</h1>
<p>Large Language Models (LLMs) excel in generating text but often struggle to produce structured output.
By leveraging <a href="https://docs.pydantic.dev/latest/">Pydantic</a>&rsquo;s type validation and prompt engineering, we can enforce and validate the output generated by LLMs.</p>
<p><em>All code examples in this blog post are written in Python. The LLM used is <a href="https://platform.openai.com/docs/guides/gpt">OpenAI&rsquo;s gpt-3.5-turbo</a>.</em></p>
<h1 id="query-the-llm">Query the LLM</h1>
<p>To query the LLM, we use the following function:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> openai
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">query</span>(prompt: str) <span style="color:#f92672">-&gt;</span> str:
</span></span><span style="display:flex;"><span>    <span style="color:#e6db74">&#34;&#34;&#34;Query the LLM with the given prompt.&#34;&#34;&#34;</span>
</span></span><span style="display:flex;"><span>    completion <span style="color:#f92672">=</span> openai<span style="color:#f92672">.</span>ChatCompletion<span style="color:#f92672">.</span>create(
</span></span><span style="display:flex;"><span>        model<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;gpt-3.5-turbo&#34;</span>,
</span></span><span style="display:flex;"><span>        messages<span style="color:#f92672">=</span>[
</span></span><span style="display:flex;"><span>            {
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;role&#34;</span>: <span style="color:#e6db74">&#34;user&#34;</span>,
</span></span><span style="display:flex;"><span>                <span style="color:#e6db74">&#34;content&#34;</span>: prompt,
</span></span><span style="display:flex;"><span>            }
</span></span><span style="display:flex;"><span>        ],
</span></span><span style="display:flex;"><span>        temperature<span style="color:#f92672">=</span><span style="color:#ae81ff">0.0</span>,
</span></span><span style="display:flex;"><span>    )
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> completion<span style="color:#f92672">.</span>choices[<span style="color:#ae81ff">0</span>]<span style="color:#f92672">.</span>message<span style="color:#f92672">.</span>content
</span></span></code></pre></div><h1 id="query-the-model">Query the model</h1>
<p>We can query the model with a simple question:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>response <span style="color:#f92672">=</span> query(<span style="color:#e6db74">&#34;What is the largest planet in our solar system?&#34;</span>)
</span></span><span style="display:flex;"><span>print(response)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;The largest planet in our solar system is Jupiter.&#39;</span>
</span></span></code></pre></div><h1 id="enforcing-json-output-with-a-prompt">Enforcing JSON output with a prompt</h1>
<p>In our prompt, we can ask the LLM to respond in a certain format:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>prompt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">I will ask you questions and you will respond. Your response should be in the following format:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	&#34;thought&#34;: &#34;How you think about the question&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">	&#34;answer&#34;: &#34;The answer to the question&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div><p>Then, we query the model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>question <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;What is the largest planet in our solar system?&#34;</span>
</span></span><span style="display:flex;"><span>response <span style="color:#f92672">=</span> query(prompt <span style="color:#f92672">+</span> question)
</span></span><span style="display:flex;"><span>print(response)
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;{</span>
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;thought&#34;</span>: <span style="color:#e6db74">&#34;This is a factual question that can be answered with scientific knowledge.&#34;</span>,
</span></span><span style="display:flex;"><span>	<span style="color:#e6db74">&#34;answer&#34;</span>: <span style="color:#e6db74">&#34;The largest planet in our solar system is Jupiter.&#34;</span>
</span></span><span style="display:flex;"><span>}<span style="color:#e6db74">&#39;</span>
</span></span></code></pre></div><p>This is great, because we can easily parse the structured output:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> json
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>parsed_response <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>loads(response)
</span></span><span style="display:flex;"><span>print(parsed_response[<span style="color:#e6db74">&#34;answer&#34;</span>])
</span></span><span style="display:flex;"><span><span style="color:#e6db74">&#39;The largest planet in our solar system is Jupiter.&#39;</span>
</span></span></code></pre></div><h1 id="validating-the-output">Validating the output</h1>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pydantic <span style="color:#f92672">import</span> BaseModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ThoughtAnswerResponse</span>(BaseModel):
</span></span><span style="display:flex;"><span>    thought: str
</span></span><span style="display:flex;"><span>    answer: str
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>raw_response <span style="color:#f92672">=</span> query(prompt)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># Note: When you are using pydantic&lt;2.0, use parse_raw instead of model_validate_json</span>
</span></span><span style="display:flex;"><span>validated_response <span style="color:#f92672">=</span> ThoughtAnswerResponse<span style="color:#f92672">.</span>model_validate_json(raw_response)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(validated_response)
</span></span><span style="display:flex;"><span>thought<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;This is a factual question that can be answered with scientific knowledge.&#39;</span> answer<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;The largest planet in our solar system is Jupiter.&#39;</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>print(type(validated_response))
</span></span><span style="display:flex;"><span><span style="color:#f92672">&lt;</span><span style="color:#66d9ef">class</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">ThoughtAnswerResponse</span><span style="color:#e6db74">&#39;&gt;</span>
</span></span></code></pre></div><h1 id="using-the-pydantic-model-in-the-prompt">Using the Pydantic model in the prompt</h1>
<p>At this moment, we describe our response format in two places:</p>
<ul>
<li>a JSON description in our prompt</li>
<li>a corresponding Pydantic model</li>
</ul>
<p>When we want to update the response format, we need to change both the prompt and the Pydantic model. This can cause inconsistencies.</p>
<p>We can solve this by <a href="https://docs.pydantic.dev/latest/usage/json_schema/">exporting the Pydantic model to a JSON schema</a> and adding the schema to the prompt. This will make the response and the Pydantic model consistent.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>response_schema_dict <span style="color:#f92672">=</span> ThoughtAnswerResponse<span style="color:#f92672">.</span>model_json_schema()
</span></span><span style="display:flex;"><span>response_schema_json <span style="color:#f92672">=</span> json<span style="color:#f92672">.</span>dumps(response_schema_dict, indent<span style="color:#f92672">=</span><span style="color:#ae81ff">2</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>prompt <span style="color:#f92672">=</span> <span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;&#34;&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">I will ask you questions, and you will respond.
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">Your response should be in the following format:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74"></span><span style="color:#e6db74">{</span>response_schema_json<span style="color:#e6db74">}</span><span style="color:#e6db74">
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div><p>The prompt will now look like this:</p>
<pre tabindex="0"><code>I will ask you questions, and you will respond. Your response should be in the following format:
```json
{
	&#34;properties&#34;: {
		&#34;thought&#34;: { &#34;title&#34;: &#34;Thought&#34;, &#34;type&#34;: &#34;string&#34; },
		&#34;answer&#34;: { &#34;title&#34;: &#34;Answer&#34;, &#34;type&#34;: &#34;string&#34; }
	},
	&#34;required&#34;: [&#34;thought&#34;, &#34;answer&#34;],
	&#34;title&#34;: &#34;ThoughtAnswerResponse&#34;,
	&#34;type&#34;: &#34;object&#34;
}
</code></pre><p>The response will look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;thought&#34;</span>: <span style="color:#e6db74">&#34;The largest planet in our solar system is Jupiter.&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;answer&#34;</span>: <span style="color:#e6db74">&#34;Jupiter&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>Now, whenever you change the Pydantic model, the corresponding schema will be put in the prompt. Note that the schema has become more complex than it was before. One benefit is that it allows us to be more specific in what responses we require.</p>
<h1 id="error-handling">Error handling</h1>
<p>The LLM may still produce results that are not consistent with our model. We can add some code to catch this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> pydantic <span style="color:#f92672">import</span> ValidationError
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">try</span>:
</span></span><span style="display:flex;"><span>    validated_response <span style="color:#f92672">=</span> ThoughtAnswerResponse<span style="color:#f92672">.</span>model_validate_json(raw_response)
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">except</span> ValidationError <span style="color:#66d9ef">as</span> e:
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Unable to validate LLM response.&#34;</span>)
</span></span><span style="display:flex;"><span>    <span style="color:#75715e"># Add your own error handling here</span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">raise</span> e
</span></span></code></pre></div><h1 id="enforce-specific-values-using-a-literal">Enforce specific values using a Literal</h1>
<p>Sometimes, you want to enforce the use of specific values for a given field. We add the field &ldquo;difficulty&rdquo; to our response object. The LLM should use it to provide information about the difficulty of the question. In a regular prompt, we would do the following:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>prompt <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;&#34;Your response should be in the following format:
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```json
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">{
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;thought&#34;: &#34;How you think about the question&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;answer&#34;: &#34;The answer to the question&#34;,
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">  &#34;difficulty&#34;: &#34;How difficult the question was. One of easy, medium or hard&#34;
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">}
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">```
</span></span></span><span style="display:flex;"><span><span style="color:#e6db74">&#34;&#34;&#34;</span>
</span></span></code></pre></div><p>Of course, the model could potentially still use other values. To validate it, we would need to write custom code.</p>
<p>With Pydantic, it is a lot easier. We create a new type called <code>Difficulty</code> using a <a href="https://docs.python.org/3/library/typing.html#typing.Literal">Literal</a>.
A Literal allows us to specify the use of a select list of values.
We add a <code>Difficulty</code> type hint to the <code>difficulty</code> field in our Pydantic model:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">from</span> typing <span style="color:#f92672">import</span> Literal
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#f92672">from</span> pydantic <span style="color:#f92672">import</span> BaseModel
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#75715e"># We create a new type</span>
</span></span><span style="display:flex;"><span>Difficulty <span style="color:#f92672">=</span> Literal[<span style="color:#e6db74">&#34;easy&#34;</span>, <span style="color:#e6db74">&#34;medium&#34;</span>, <span style="color:#e6db74">&#34;hard&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">ThoughtAnswerResponse</span>(BaseModel):
</span></span><span style="display:flex;"><span>    thought: str
</span></span><span style="display:flex;"><span>    answer: str
</span></span><span style="display:flex;"><span>    difficulty: Difficulty
</span></span></code></pre></div><p>The LLM responds may respond with a value we do not allow:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-json" data-lang="json"><span style="display:flex;"><span>{
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;thought&#34;</span>: <span style="color:#e6db74">&#34;The largest planet in our solar system is Jupiter.&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;answer&#34;</span>: <span style="color:#e6db74">&#34;Jupiter&#34;</span>,
</span></span><span style="display:flex;"><span>  <span style="color:#f92672">&#34;difficulty&#34;</span>: <span style="color:#e6db74">&#34;Unknown&#34;</span>
</span></span><span style="display:flex;"><span>}
</span></span></code></pre></div><p>When we parse this result, Pydantic will validate the values for the <code>difficulty</code> field. <code>Unknown</code> does not match one of the values specified in the Literal type we have defined. So we get the following error:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>validated_response <span style="color:#f92672">=</span> ThoughtAnswerResponse<span style="color:#f92672">.</span>model_validate_json(response)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>ValidationError: <span style="color:#ae81ff">1</span> validation error <span style="color:#66d9ef">for</span> ThoughtAnswerResponse
</span></span><span style="display:flex;"><span>difficulty
</span></span><span style="display:flex;"><span>    Input should be <span style="color:#e6db74">&#39;easy&#39;</span>, <span style="color:#e6db74">&#39;medium&#39;</span> <span style="color:#f92672">or</span> <span style="color:#e6db74">&#39;hard&#39;</span> [type<span style="color:#f92672">=</span>literal_error, input_value<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;Unknown&#39;</span>, input_type<span style="color:#f92672">=</span>str]
</span></span></code></pre></div><h1 id="conclusion">Conclusion</h1>
<p>By using Pydantic and prompt engineering, you can enforce and validate the output of LLMs. This provides you with greater control of the LLM output and allow you to build more robust AI systems.</p>
]]></content></item><item><title>A Terminal Spinner in Python</title><link>https://timotk.github.io/posts/2022/06/a-terminal-spinner-in-python/</link><pubDate>Sat, 25 Jun 2022 12:30:00 +0200</pubDate><guid>https://timotk.github.io/posts/2022/06/a-terminal-spinner-in-python/</guid><description>We are going to build a spinning status indicator that runs while other code is executing.
It will look like this: Why? You&amp;rsquo;ve got some code that takes a while to run.
import time import random def slow_func(): seconds = random.randint(2, 5) time.sleep(seconds) print(&amp;#34;Done!&amp;#34;) if __name__ == &amp;#39;__main__&amp;#39;: slow_func() Now, when you execute this, you&amp;rsquo;ll see the following: You&amp;rsquo;ll wonder whether your code or your system is working correctly or frozen.</description><content type="html"><![CDATA[<p>We are going to build a spinning status indicator that runs while other code is executing.</p>
<p>It will look like this:
<img src="/images/spinner.gif" alt=""></p>
<h2 id="why">Why?</h2>
<p>You&rsquo;ve got some code that takes a while to run.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> random
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">slow_func</span>():
</span></span><span style="display:flex;"><span>    seconds <span style="color:#f92672">=</span> random<span style="color:#f92672">.</span>randint(<span style="color:#ae81ff">2</span>, <span style="color:#ae81ff">5</span>)
</span></span><span style="display:flex;"><span>    time<span style="color:#f92672">.</span>sleep(seconds)
</span></span><span style="display:flex;"><span>    print(<span style="color:#e6db74">&#34;Done!&#34;</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    slow_func()
</span></span></code></pre></div><p>Now, when you execute this, you&rsquo;ll see the following:
<img src="/images/terminal-busy-block.png" alt=""></p>
<p>You&rsquo;ll wonder whether your code or your system is working correctly or frozen. Who knows?</p>
<h2 id="introducing-a-spinner">Introducing a spinner</h2>
<p>Ideally, we&rsquo;d like to show some sort of activity while our code is executing.
We can do that with a spinner. To create a spinner, we can use:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">spin</span>():
</span></span><span style="display:flex;"><span>    spinners <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#34;</span>]
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>cycle(spinners):
</span></span><span style="display:flex;"><span>        print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>        time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)
</span></span></code></pre></div><ol>
<li>We introduce a list of spinners (<code>| / - \ </code>). The double backslash is used because of <a href="https://www.freecodecamp.org/news/escape-sequences-python/">escaping</a>.</li>
<li>Using <code>itertools.cycle</code>, we can create an endless <em>cycle</em> of our spinner elements.</li>
<li>In each iteration, we print one of characters.
<ol>
<li>By default, Python ends a print statement with a newline. We disable that by printing an empty string (<code>end=&quot;&quot;</code>)</li>
<li>By putting <code>\r</code> in front of our character, we move our cursor back to the start of the line. This is called a <a href="https://en.wikipedia.org/wiki/Carriage_return">carriage return</a>.</li>
<li>We sleep for 100ms.</li>
</ol>
</li>
</ol>
<h1 id="combine-the-spinner-with-the-code">Combine the spinner with the code</h1>
<p>Now, combining them can be done like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>spin()
</span></span><span style="display:flex;"><span>slow_func()
</span></span></code></pre></div><p>But obviously this does not work, since our code executes sequentially.
First the spinner runs to completion, then <code>slow_func</code> will run.
Due to the endless nature of <code>itertools.cycle</code>, our code in <code>spin()</code> never stops.</p>
<p>To solve this, we can run our spinner in its own <a href="https://docs.python.org/3/library/threading.html">thread</a>, which allows us to run code in parallel:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> threading
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">if</span> __name__ <span style="color:#f92672">==</span> <span style="color:#e6db74">&#39;__main__&#39;</span>:
</span></span><span style="display:flex;"><span>    thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>spin)
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>    thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>    slow_func()
</span></span></code></pre></div><ol>
<li>We start a new thread, with the <code>spin</code> function as its target.</li>
<li>We set <code>thread.daemon</code> to True, to make the thread run in the background.</li>
<li>We start the thread.</li>
<li>We call our slow function</li>
</ol>
<p>Here&rsquo;s what it looks like:
<img src="/images/spinner.gif" alt=""></p>
<h1 id="making-it-awesome">Making it awesome</h1>
<p>If you want to reuse your code, it wouldn&rsquo;t be so nice. To fix that, we can introduce a <a href="https://docs.python.org/3/reference/datamodel.html#context-managers">context manager</a>.
This will make usage look like this:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">with</span> Spinner():
</span></span><span style="display:flex;"><span>    slow_func()
</span></span></code></pre></div><p>Here&rsquo;s how we write the context manager:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Spinner</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>spin)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">spin</span>(self):
</span></span><span style="display:flex;"><span>        spinners <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#34;</span>]
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>cycle(spinners):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>running:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>            time<span style="color:#f92672">.</span>sleep(<span style="color:#ae81ff">0.1</span>)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __enter__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __exit__(self, exc_type, exc_val, exc_tb):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span></code></pre></div><p>The logic is:</p>
<ol>
<li>We initialize the instance with <code>Spinner()</code>. This calls <code>__init__()</code>, which sets running to <code>False</code> and creates the thread.</li>
<li>After the <code>with Spinner():</code> line, <code>Spinner.__enter__()</code> gets called. We now enter the context and the thread starts running.</li>
<li>Our slow function runs. Meanwhile, every 100ms, a spin character gets printed.</li>
<li>Our slow function ends and we exit the <code>with</code> block. Now, <code>Spinner.__exit__()</code> gets called. Running will be set to <code>False</code>, which means the <code>spin()</code> method will break out of its loop, once it detects <code>self.running</code> is <code>False</code>.</li>
</ol>
<h1 id="further-improvements">Further improvements</h1>
<p>We can make our code even more dynamic, by allowing you to set the spin timeout and the spinners during class initialization.
Here&rsquo;s the full code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span><span style="color:#f92672">import</span> itertools
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> threading
</span></span><span style="display:flex;"><span><span style="color:#f92672">import</span> time
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">Spinner</span>:
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __init__(self, timeout: float <span style="color:#f92672">=</span> <span style="color:#ae81ff">0.1</span>, spinners: list <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;|&#34;</span>, <span style="color:#e6db74">&#34;/&#34;</span>, <span style="color:#e6db74">&#34;-&#34;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\\</span><span style="color:#e6db74">&#34;</span>]):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>timeout <span style="color:#f92672">=</span> timeout
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>spinners <span style="color:#f92672">=</span> spinners
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread <span style="color:#f92672">=</span> threading<span style="color:#f92672">.</span>Thread(target<span style="color:#f92672">=</span>self<span style="color:#f92672">.</span>spin)
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>daemon <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">spin</span>(self):
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">for</span> c <span style="color:#f92672">in</span> itertools<span style="color:#f92672">.</span>cycle(self<span style="color:#f92672">.</span>spinners):
</span></span><span style="display:flex;"><span>            <span style="color:#66d9ef">if</span> <span style="color:#f92672">not</span> self<span style="color:#f92672">.</span>running:
</span></span><span style="display:flex;"><span>                print(<span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>                <span style="color:#66d9ef">break</span>
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>            print(<span style="color:#e6db74">f</span><span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\r</span><span style="color:#e6db74">{</span>c<span style="color:#e6db74">}</span><span style="color:#e6db74">&#34;</span>, end<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;&#34;</span>)
</span></span><span style="display:flex;"><span>            time<span style="color:#f92672">.</span>sleep(self<span style="color:#f92672">.</span>timeout)
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __enter__(self):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">True</span>
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>thread<span style="color:#f92672">.</span>start()
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">def</span> __exit__(self, exc_type, exc_val, exc_tb):
</span></span><span style="display:flex;"><span>        self<span style="color:#f92672">.</span>running <span style="color:#f92672">=</span> <span style="color:#66d9ef">False</span>
</span></span></code></pre></div><p>You could use any spinners you like, for example:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-python" data-lang="python"><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;⢿&#34;</span>, <span style="color:#e6db74">&#34;⣻&#34;</span>, <span style="color:#e6db74">&#34;⣽&#34;</span>, <span style="color:#e6db74">&#34;⣾&#34;</span>, <span style="color:#e6db74">&#34;⣷&#34;</span>, <span style="color:#e6db74">&#34;⣯&#34;</span>, <span style="color:#e6db74">&#34;⣟&#34;</span>, <span style="color:#e6db74">&#34;⡿&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;👆&#34;</span>, <span style="color:#e6db74">&#34;👉&#34;</span>, <span style="color:#e6db74">&#34;👇&#34;</span>, <span style="color:#e6db74">&#34;👈&#34;</span>]
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>[<span style="color:#e6db74">&#34;|   &#34;</span>, <span style="color:#e6db74">&#34; |  &#34;</span>, <span style="color:#e6db74">&#34;  | &#34;</span>, <span style="color:#e6db74">&#34;   |&#34;</span>]
</span></span></code></pre></div><p>You can find many more examples online, or you can simply make your own.</p>
<h1 id="final-thoughts">Final thoughts</h1>
<p>I hoped you learned something about how we can indicate activity while you are running your program interactively.
If you need a more extensive approach, you can use a library like <a href="https://github.com/Textualize/rich">rich</a>.</p>
]]></content></item></channel></rss>